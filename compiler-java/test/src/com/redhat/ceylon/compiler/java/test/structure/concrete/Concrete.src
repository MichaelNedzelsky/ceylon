package com.redhat.ceylon.compiler.java.test.structure.concrete;

interface Concrete<A> {
    
    public void mShared();
    
    public abstract A mShared$a();
    
    public void mShared(final A a);
    
    public void mShared(final A a, final .ceylon.language.Sequential<? extends A> aseq);
    
    public abstract .java.lang.Object mFormal();
    
    public abstract A mFormal$a();
    
    public abstract .java.lang.Object mFormal(final A a);
    
    public abstract .java.lang.Object mFormal(final A a, final .ceylon.language.Sequential<? extends A> aseq);
    
    public .java.lang.Object mDefault();
    
    public abstract A mDefault$a();
    
    public .java.lang.Object mDefault(final A a);
    
    public .java.lang.Object mDefault(final A a, final .ceylon.language.Sequential<? extends A> aseq);
}
final class Concrete$impl {
    
    private static <A>void mNonShared$priv$(.com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete<A> $this) {
        (
            let
            {
                A $ceylontmp$a$0 = .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl.mNonShared$a($this);
                .ceylon.language.Sequential<? extends A> $ceylontmp$aseq$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                mNonShared$priv$($this, $ceylontmp$a$0, $ceylontmp$aseq$1);
            }
            returning null;
        );
    }
    
    private static <A>A mNonShared$a(.com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete<A> $this) {
        return null;
    }
    
    private static <A>void mNonShared$priv$(.com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete<A> $this, final A a) {
        (
            let
            {
                .ceylon.language.Sequential<? extends A> $ceylontmp$aseq$2 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                mNonShared$priv$($this, a, $ceylontmp$aseq$2);
            }
            returning null;
        );
    }
    
    static <A>void mNonShared$priv$(final .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete<A> $this, final A a, final .ceylon.language.Sequential<? extends A> aseq) {
    }
    
    static <A>A mShared$a(.com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete<A> $this) {
        return null;
    }
    
    static <A>void mShared(final .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete<A> $this, final A a, final .ceylon.language.Sequential<? extends A> aseq) {
        mNonShared$priv$($this);
    }
    
    static <A>A mFormal$a(.com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete<A> $this) {
        return null;
    }
    
    static <A>A mDefault$a(.com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete<A> $this) {
        return null;
    }
    
    private static <A>.java.lang.Object mDefault$canonical$(.com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete<A> $this, final A a, final .ceylon.language.Sequential<? extends A> aseq) {
        return null;
    }
    
    static <A>.java.lang.Object mDefault(final .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete<A> $this, final A a, final .ceylon.language.Sequential<? extends A> aseq) {
        return mDefault$canonical$($this, a, aseq);
    }
}
final class concreteCallsites_ {
    
    private concreteCallsites_() {
    }
    
    static void concreteCallsites(final .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete conc) {
        conc.mShared();
        conc.mShared(null);
        conc.mShared(.ceylon.language.Integer.instance(1L));
        conc.mShared(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$3$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$3$argthis$ = arg$3$callable$;
                .java.lang.Object arg$3$0 = arg$3$argthis$.mShared$a();
                .ceylon.language.Sequential arg$3$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$3$callable$.mShared(arg$3$0, arg$3$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$4$callable$ = conc;
                .java.lang.Object arg$4$0 = null;
                .ceylon.language.Sequential arg$4$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$4$callable$.mShared(arg$4$0, arg$4$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$5$callable$ = conc;
                .java.lang.Object arg$5$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential arg$5$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$5$callable$.mShared(arg$5$0, arg$5$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$6$callable$ = conc;
                .java.lang.Object arg$6$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential arg$6$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$6$callable$.mShared(arg$6$0, arg$6$1);
            }
            returning null;
        );
        conc.mFormal();
        conc.mFormal(null);
        conc.mFormal(.ceylon.language.Integer.instance(1L));
        conc.mFormal(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$7$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$7$argthis$ = arg$7$callable$;
                .java.lang.Object arg$7$0 = arg$7$argthis$.mFormal$a();
                .ceylon.language.Sequential arg$7$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$7$callable$.mFormal(arg$7$0, arg$7$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$8$callable$ = conc;
                .java.lang.Object arg$8$0 = null;
                .ceylon.language.Sequential arg$8$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$8$callable$.mFormal(arg$8$0, arg$8$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$9$callable$ = conc;
                .java.lang.Object arg$9$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential arg$9$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$9$callable$.mFormal(arg$9$0, arg$9$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$10$callable$ = conc;
                .java.lang.Object arg$10$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential arg$10$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$10$callable$.mFormal(arg$10$0, arg$10$1);
            }
            returning null;
        );
        conc.mDefault();
        conc.mDefault(null);
        conc.mDefault(.ceylon.language.Integer.instance(1L));
        conc.mDefault(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$11$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$11$argthis$ = arg$11$callable$;
                .java.lang.Object arg$11$0 = arg$11$argthis$.mDefault$a();
                .ceylon.language.Sequential arg$11$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$11$callable$.mDefault(arg$11$0, arg$11$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$12$callable$ = conc;
                .java.lang.Object arg$12$0 = null;
                .ceylon.language.Sequential arg$12$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$12$callable$.mDefault(arg$12$0, arg$12$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$13$callable$ = conc;
                .java.lang.Object arg$13$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential arg$13$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$13$callable$.mDefault(arg$13$0, arg$13$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$14$callable$ = conc;
                .java.lang.Object arg$14$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential arg$14$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$14$callable$.mDefault(arg$14$0, arg$14$1);
            }
            returning null;
        );
    }
}
class ConcreteImpl<B> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete<B> {
    
    ConcreteImpl(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$B) {
        this.$reified$B = $reified$B;
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$B;
    
    @.java.lang.Override
    public final B mShared$a() {
        return .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl.mShared$a(this);
    }
    
    @.java.lang.Override
    public void mShared() {
        (
            let
            {
                B $ceylontmp$a$15 = mShared$a();
                .ceylon.language.Sequential<? extends B> $ceylontmp$aseq$16 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                mShared$canonical$($ceylontmp$a$15, $ceylontmp$aseq$16);
            }
            returning null;
        );
    }
    
    @.java.lang.Override
    public void mShared(final B a) {
        (
            let
            {
                .ceylon.language.Sequential<? extends B> $ceylontmp$aseq$17 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                mShared$canonical$(a, $ceylontmp$aseq$17);
            }
            returning null;
        );
    }
    
    @.java.lang.Override
    public final void mShared(final B a, final .ceylon.language.Sequential<? extends B> aseq) {
        .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl.mShared(this, a, aseq);
    }
    
    private void mShared$canonical$(final B a, final .ceylon.language.Sequential<? extends B> aseq) {
        .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl.mShared(this, a, aseq);
    }
    
    @.java.lang.Override
    public final B mFormal$a() {
        return .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl.mFormal$a(this);
    }
    
    @.java.lang.Override
    public final B mDefault$a() {
        return .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl.mDefault$a(this);
    }
    
    @.java.lang.Override
    public .java.lang.Object mDefault() {
        return (
            let
            {
                B $ceylontmp$a$18 = mDefault$a();
                .ceylon.language.Sequential<? extends B> $ceylontmp$aseq$19 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning mDefault$canonical$($ceylontmp$a$18, $ceylontmp$aseq$19);
        );
    }
    
    @.java.lang.Override
    public .java.lang.Object mDefault(final B a) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends B> $ceylontmp$aseq$20 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning mDefault$canonical$(a, $ceylontmp$aseq$20);
        );
    }
    
    @.java.lang.Override
    public .java.lang.Object mDefault(final B a, final .ceylon.language.Sequential<? extends B> aseq) {
        return .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl.mDefault(this, a, aseq);
    }
    
    private .java.lang.Object mDefault$canonical$(final B a, final .ceylon.language.Sequential<? extends B> aseq) {
        return .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl.mDefault(this, a, aseq);
    }
    
    public final .java.lang.Object mFormal() {
        return (
            let
            {
                B $ceylontmp$b$21 = mFormal$a();
                .ceylon.language.Sequential<? extends B> $ceylontmp$bseq$22 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning mFormal($ceylontmp$b$21, $ceylontmp$bseq$22);
        );
    }
    
    public final .java.lang.Object mFormal(final B b) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends B> $ceylontmp$bseq$23 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning mFormal(b, $ceylontmp$bseq$23);
        );
    }
    
    @.java.lang.Override
    public final .java.lang.Object mFormal(final B b, final .ceylon.language.Sequential<? extends B> bseq) {
        return null;
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImpl(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImpl.class, $reified$B);
    }
}
final class concreteImplCallsites_ {
    
    private concreteImplCallsites_() {
    }
    
    static void concreteImplCallsites(final .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImpl conc) {
        conc.mShared();
        conc.mShared(null);
        conc.mShared(.ceylon.language.Integer.instance(1L));
        conc.mShared(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$24$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$24$argthis$ = arg$24$callable$;
                .java.lang.Object arg$24$0 = arg$24$argthis$.mShared$a();
                .ceylon.language.Sequential arg$24$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$24$callable$.mShared(arg$24$0, arg$24$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$25$callable$ = conc;
                .java.lang.Object arg$25$0 = null;
                .ceylon.language.Sequential arg$25$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$25$callable$.mShared(arg$25$0, arg$25$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$26$callable$ = conc;
                .java.lang.Object arg$26$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential arg$26$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$26$callable$.mShared(arg$26$0, arg$26$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$27$callable$ = conc;
                .java.lang.Object arg$27$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential arg$27$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$27$callable$.mShared(arg$27$0, arg$27$1);
            }
            returning null;
        );
        conc.mFormal();
        conc.mFormal(null);
        conc.mFormal(.ceylon.language.Integer.instance(1L));
        conc.mFormal(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImpl arg$28$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImpl arg$28$argthis$ = arg$28$callable$;
                .java.lang.Object arg$28$0 = arg$28$argthis$.mFormal$a();
                .ceylon.language.Sequential arg$28$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$28$callable$.mFormal(arg$28$0, arg$28$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImpl arg$29$callable$ = conc;
                .java.lang.Object arg$29$0 = null;
                .ceylon.language.Sequential arg$29$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$29$callable$.mFormal(arg$29$0, arg$29$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImpl arg$30$callable$ = conc;
                .java.lang.Object arg$30$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential arg$30$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$30$callable$.mFormal(arg$30$0, arg$30$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImpl arg$31$callable$ = conc;
                .java.lang.Object arg$31$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential arg$31$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$31$callable$.mFormal(arg$31$0, arg$31$1);
            }
            returning null;
        );
        conc.mDefault();
        conc.mDefault(null);
        conc.mDefault(.ceylon.language.Integer.instance(1L));
        conc.mDefault(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$32$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$32$argthis$ = arg$32$callable$;
                .java.lang.Object arg$32$0 = arg$32$argthis$.mDefault$a();
                .ceylon.language.Sequential arg$32$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$32$callable$.mDefault(arg$32$0, arg$32$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$33$callable$ = conc;
                .java.lang.Object arg$33$0 = null;
                .ceylon.language.Sequential arg$33$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$33$callable$.mDefault(arg$33$0, arg$33$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$34$callable$ = conc;
                .java.lang.Object arg$34$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential arg$34$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$34$callable$.mDefault(arg$34$0, arg$34$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$35$callable$ = conc;
                .java.lang.Object arg$35$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential arg$35$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$35$callable$.mDefault(arg$35$0, arg$35$1);
            }
            returning null;
        );
    }
}
class ConcreteImplWithDefault<C> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete<C> {
    
    ConcreteImplWithDefault(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$C) {
        this.$reified$C = $reified$C;
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$C;
    
    @.java.lang.Override
    public final C mShared$a() {
        return .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl.mShared$a(this);
    }
    
    @.java.lang.Override
    public void mShared() {
        (
            let
            {
                C $ceylontmp$a$36 = mShared$a();
                .ceylon.language.Sequential<? extends C> $ceylontmp$aseq$37 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                mShared$canonical$($ceylontmp$a$36, $ceylontmp$aseq$37);
            }
            returning null;
        );
    }
    
    @.java.lang.Override
    public void mShared(final C a) {
        (
            let
            {
                .ceylon.language.Sequential<? extends C> $ceylontmp$aseq$38 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                mShared$canonical$(a, $ceylontmp$aseq$38);
            }
            returning null;
        );
    }
    
    @.java.lang.Override
    public final void mShared(final C a, final .ceylon.language.Sequential<? extends C> aseq) {
        .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl.mShared(this, a, aseq);
    }
    
    private void mShared$canonical$(final C a, final .ceylon.language.Sequential<? extends C> aseq) {
        .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl.mShared(this, a, aseq);
    }
    
    @.java.lang.Override
    public final C mFormal$a() {
        return .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl.mFormal$a(this);
    }
    
    @.java.lang.Override
    public final C mDefault$a() {
        return .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl.mDefault$a(this);
    }
    
    public final .java.lang.Object mFormal() {
        return (
            let
            {
                C $ceylontmp$c$39 = mFormal$a();
                .ceylon.language.Sequential<? extends C> $ceylontmp$cseq$40 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning mFormal($ceylontmp$c$39, $ceylontmp$cseq$40);
        );
    }
    
    public final .java.lang.Object mFormal(final C c) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends C> $ceylontmp$cseq$41 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning mFormal(c, $ceylontmp$cseq$41);
        );
    }
    
    @.java.lang.Override
    public final .java.lang.Object mFormal(final C c, final .ceylon.language.Sequential<? extends C> cseq) {
        return null;
    }
    
    public final .java.lang.Object mDefault() {
        return (
            let
            {
                C $ceylontmp$c$42 = mDefault$a();
                .ceylon.language.Sequential<? extends C> $ceylontmp$cseq$43 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning mDefault($ceylontmp$c$42, $ceylontmp$cseq$43);
        );
    }
    
    public final .java.lang.Object mDefault(final C c) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends C> $ceylontmp$cseq$44 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning mDefault(c, $ceylontmp$cseq$44);
        );
    }
    
    @.java.lang.Override
    public final .java.lang.Object mDefault(final C c, final .ceylon.language.Sequential<? extends C> cseq) {
        return null;
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault.class, $reified$C);
    }
}
final class concreteImplWithDefaultCallsites_ {
    
    private concreteImplWithDefaultCallsites_() {
    }
    
    static void concreteImplWithDefaultCallsites(final .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault conc) {
        conc.mShared();
        conc.mShared(null);
        conc.mShared(.ceylon.language.Integer.instance(1L));
        conc.mShared(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$45$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$45$argthis$ = arg$45$callable$;
                .java.lang.Object arg$45$0 = arg$45$argthis$.mShared$a();
                .ceylon.language.Sequential arg$45$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$45$callable$.mShared(arg$45$0, arg$45$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$46$callable$ = conc;
                .java.lang.Object arg$46$0 = null;
                .ceylon.language.Sequential arg$46$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$46$callable$.mShared(arg$46$0, arg$46$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$47$callable$ = conc;
                .java.lang.Object arg$47$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential arg$47$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$47$callable$.mShared(arg$47$0, arg$47$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$48$callable$ = conc;
                .java.lang.Object arg$48$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential arg$48$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$48$callable$.mShared(arg$48$0, arg$48$1);
            }
            returning null;
        );
        conc.mFormal();
        conc.mFormal(null);
        conc.mFormal(.ceylon.language.Integer.instance(1L));
        conc.mFormal(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault arg$49$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault arg$49$argthis$ = arg$49$callable$;
                .java.lang.Object arg$49$0 = arg$49$argthis$.mFormal$a();
                .ceylon.language.Sequential arg$49$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$49$callable$.mFormal(arg$49$0, arg$49$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault arg$50$callable$ = conc;
                .java.lang.Object arg$50$0 = null;
                .ceylon.language.Sequential arg$50$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$50$callable$.mFormal(arg$50$0, arg$50$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault arg$51$callable$ = conc;
                .java.lang.Object arg$51$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential arg$51$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$51$callable$.mFormal(arg$51$0, arg$51$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault arg$52$callable$ = conc;
                .java.lang.Object arg$52$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential arg$52$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$52$callable$.mFormal(arg$52$0, arg$52$1);
            }
            returning null;
        );
        conc.mDefault();
        conc.mDefault(null);
        conc.mDefault(.ceylon.language.Integer.instance(1L));
        conc.mDefault(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault arg$53$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault arg$53$argthis$ = arg$53$callable$;
                .java.lang.Object arg$53$0 = arg$53$argthis$.mDefault$a();
                .ceylon.language.Sequential arg$53$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$53$callable$.mDefault(arg$53$0, arg$53$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault arg$54$callable$ = conc;
                .java.lang.Object arg$54$0 = null;
                .ceylon.language.Sequential arg$54$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$54$callable$.mDefault(arg$54$0, arg$54$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault arg$55$callable$ = conc;
                .java.lang.Object arg$55$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential arg$55$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$55$callable$.mDefault(arg$55$0, arg$55$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault arg$56$callable$ = conc;
                .java.lang.Object arg$56$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential arg$56$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$56$callable$.mDefault(arg$56$0, arg$56$1);
            }
            returning null;
        );
    }
}
abstract class Abstract<D> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete<D> {
    
    Abstract(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$D) {
        this.$reified$D = $reified$D;
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$D;
    
    @.java.lang.Override
    public final D mShared$a() {
        return .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl.mShared$a(this);
    }
    
    @.java.lang.Override
    public void mShared() {
        (
            let
            {
                D $ceylontmp$a$57 = mShared$a();
                .ceylon.language.Sequential<? extends D> $ceylontmp$aseq$58 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                mShared$canonical$($ceylontmp$a$57, $ceylontmp$aseq$58);
            }
            returning null;
        );
    }
    
    @.java.lang.Override
    public void mShared(final D a) {
        (
            let
            {
                .ceylon.language.Sequential<? extends D> $ceylontmp$aseq$59 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                mShared$canonical$(a, $ceylontmp$aseq$59);
            }
            returning null;
        );
    }
    
    @.java.lang.Override
    public final void mShared(final D a, final .ceylon.language.Sequential<? extends D> aseq) {
        .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl.mShared(this, a, aseq);
    }
    
    private void mShared$canonical$(final D a, final .ceylon.language.Sequential<? extends D> aseq) {
        .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl.mShared(this, a, aseq);
    }
    
    @.java.lang.Override
    public final D mFormal$a() {
        return .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl.mFormal$a(this);
    }
    
    @.java.lang.Override
    public final D mDefault$a() {
        return .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl.mDefault$a(this);
    }
    
    @.java.lang.Override
    public .java.lang.Object mDefault() {
        return (
            let
            {
                D $ceylontmp$a$60 = mDefault$a();
                .ceylon.language.Sequential<? extends D> $ceylontmp$aseq$61 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning mDefault$canonical$($ceylontmp$a$60, $ceylontmp$aseq$61);
        );
    }
    
    @.java.lang.Override
    public .java.lang.Object mDefault(final D a) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends D> $ceylontmp$aseq$62 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning mDefault$canonical$(a, $ceylontmp$aseq$62);
        );
    }
    
    @.java.lang.Override
    public .java.lang.Object mDefault(final D a, final .ceylon.language.Sequential<? extends D> aseq) {
        return .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl.mDefault(this, a, aseq);
    }
    
    private .java.lang.Object mDefault$canonical$(final D a, final .ceylon.language.Sequential<? extends D> aseq) {
        return .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl.mDefault(this, a, aseq);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.concrete.Abstract.class, $reified$D);
    }
}
final class abstractCallsites_ {
    
    private abstractCallsites_() {
    }
    
    static void abstractCallsites(final .com.redhat.ceylon.compiler.java.test.structure.concrete.Abstract conc) {
        conc.mShared();
        conc.mShared(null);
        conc.mShared(.ceylon.language.Integer.instance(1L));
        conc.mShared(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$63$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$63$argthis$ = arg$63$callable$;
                .java.lang.Object arg$63$0 = arg$63$argthis$.mShared$a();
                .ceylon.language.Sequential arg$63$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$63$callable$.mShared(arg$63$0, arg$63$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$64$callable$ = conc;
                .java.lang.Object arg$64$0 = null;
                .ceylon.language.Sequential arg$64$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$64$callable$.mShared(arg$64$0, arg$64$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$65$callable$ = conc;
                .java.lang.Object arg$65$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential arg$65$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$65$callable$.mShared(arg$65$0, arg$65$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$66$callable$ = conc;
                .java.lang.Object arg$66$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential arg$66$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$66$callable$.mShared(arg$66$0, arg$66$1);
            }
            returning null;
        );
        conc.mFormal();
        conc.mFormal(null);
        conc.mFormal(.ceylon.language.Integer.instance(1L));
        conc.mFormal(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$67$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$67$argthis$ = arg$67$callable$;
                .java.lang.Object arg$67$0 = arg$67$argthis$.mFormal$a();
                .ceylon.language.Sequential arg$67$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$67$callable$.mFormal(arg$67$0, arg$67$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$68$callable$ = conc;
                .java.lang.Object arg$68$0 = null;
                .ceylon.language.Sequential arg$68$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$68$callable$.mFormal(arg$68$0, arg$68$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$69$callable$ = conc;
                .java.lang.Object arg$69$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential arg$69$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$69$callable$.mFormal(arg$69$0, arg$69$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$70$callable$ = conc;
                .java.lang.Object arg$70$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential arg$70$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$70$callable$.mFormal(arg$70$0, arg$70$1);
            }
            returning null;
        );
        conc.mDefault();
        conc.mDefault(null);
        conc.mDefault(.ceylon.language.Integer.instance(1L));
        conc.mDefault(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$71$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$71$argthis$ = arg$71$callable$;
                .java.lang.Object arg$71$0 = arg$71$argthis$.mDefault$a();
                .ceylon.language.Sequential arg$71$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$71$callable$.mDefault(arg$71$0, arg$71$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$72$callable$ = conc;
                .java.lang.Object arg$72$0 = null;
                .ceylon.language.Sequential arg$72$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$72$callable$.mDefault(arg$72$0, arg$72$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$73$callable$ = conc;
                .java.lang.Object arg$73$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential arg$73$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$73$callable$.mDefault(arg$73$0, arg$73$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$74$callable$ = conc;
                .java.lang.Object arg$74$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential arg$74$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$74$callable$.mDefault(arg$74$0, arg$74$1);
            }
            returning null;
        );
    }
}
class AbstractSub<E> extends .com.redhat.ceylon.compiler.java.test.structure.concrete.Abstract<E> {
    
    AbstractSub(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$E) {
        super($reified$E);
        this.$reified$E = $reified$E;
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$E;
    
    public final .java.lang.Object mFormal() {
        return (
            let
            {
                E $ceylontmp$e$75 = mFormal$a();
                .ceylon.language.Sequential<? extends E> $ceylontmp$eseq$76 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning mFormal($ceylontmp$e$75, $ceylontmp$eseq$76);
        );
    }
    
    public final .java.lang.Object mFormal(final E e) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends E> $ceylontmp$eseq$77 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning mFormal(e, $ceylontmp$eseq$77);
        );
    }
    
    @.java.lang.Override
    public final .java.lang.Object mFormal(final E e, final .ceylon.language.Sequential<? extends E> eseq) {
        return null;
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractSub(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractSub.class, $reified$E);
    }
}
final class abstractSubCallsites_ {
    
    private abstractSubCallsites_() {
    }
    
    static void abstractSubCallsites(final .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractSub conc) {
        conc.mShared();
        conc.mShared(null);
        conc.mShared(.ceylon.language.Integer.instance(1L));
        conc.mShared(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$78$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$78$argthis$ = arg$78$callable$;
                .java.lang.Object arg$78$0 = arg$78$argthis$.mShared$a();
                .ceylon.language.Sequential arg$78$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$78$callable$.mShared(arg$78$0, arg$78$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$79$callable$ = conc;
                .java.lang.Object arg$79$0 = null;
                .ceylon.language.Sequential arg$79$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$79$callable$.mShared(arg$79$0, arg$79$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$80$callable$ = conc;
                .java.lang.Object arg$80$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential arg$80$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$80$callable$.mShared(arg$80$0, arg$80$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$81$callable$ = conc;
                .java.lang.Object arg$81$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential arg$81$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$81$callable$.mShared(arg$81$0, arg$81$1);
            }
            returning null;
        );
        conc.mFormal();
        conc.mFormal(null);
        conc.mFormal(.ceylon.language.Integer.instance(1L));
        conc.mFormal(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractSub arg$82$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractSub arg$82$argthis$ = arg$82$callable$;
                .java.lang.Object arg$82$0 = arg$82$argthis$.mFormal$a();
                .ceylon.language.Sequential arg$82$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$82$callable$.mFormal(arg$82$0, arg$82$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractSub arg$83$callable$ = conc;
                .java.lang.Object arg$83$0 = null;
                .ceylon.language.Sequential arg$83$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$83$callable$.mFormal(arg$83$0, arg$83$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractSub arg$84$callable$ = conc;
                .java.lang.Object arg$84$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential arg$84$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$84$callable$.mFormal(arg$84$0, arg$84$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractSub arg$85$callable$ = conc;
                .java.lang.Object arg$85$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential arg$85$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$85$callable$.mFormal(arg$85$0, arg$85$1);
            }
            returning null;
        );
        conc.mDefault();
        conc.mDefault(null);
        conc.mDefault(.ceylon.language.Integer.instance(1L));
        conc.mDefault(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$86$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$86$argthis$ = arg$86$callable$;
                .java.lang.Object arg$86$0 = arg$86$argthis$.mDefault$a();
                .ceylon.language.Sequential arg$86$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$86$callable$.mDefault(arg$86$0, arg$86$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$87$callable$ = conc;
                .java.lang.Object arg$87$0 = null;
                .ceylon.language.Sequential arg$87$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$87$callable$.mDefault(arg$87$0, arg$87$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$88$callable$ = conc;
                .java.lang.Object arg$88$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential arg$88$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$88$callable$.mDefault(arg$88$0, arg$88$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$89$callable$ = conc;
                .java.lang.Object arg$89$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential arg$89$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$89$callable$.mDefault(arg$89$0, arg$89$1);
            }
            returning null;
        );
    }
}
abstract class AbstractImpl<F> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete<F> {
    
    AbstractImpl(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$F) {
        this.$reified$F = $reified$F;
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$F;
    
    @.java.lang.Override
    public final F mShared$a() {
        return .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl.mShared$a(this);
    }
    
    @.java.lang.Override
    public void mShared() {
        (
            let
            {
                F $ceylontmp$a$90 = mShared$a();
                .ceylon.language.Sequential<? extends F> $ceylontmp$aseq$91 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                mShared$canonical$($ceylontmp$a$90, $ceylontmp$aseq$91);
            }
            returning null;
        );
    }
    
    @.java.lang.Override
    public void mShared(final F a) {
        (
            let
            {
                .ceylon.language.Sequential<? extends F> $ceylontmp$aseq$92 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                mShared$canonical$(a, $ceylontmp$aseq$92);
            }
            returning null;
        );
    }
    
    @.java.lang.Override
    public final void mShared(final F a, final .ceylon.language.Sequential<? extends F> aseq) {
        .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl.mShared(this, a, aseq);
    }
    
    private void mShared$canonical$(final F a, final .ceylon.language.Sequential<? extends F> aseq) {
        .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl.mShared(this, a, aseq);
    }
    
    @.java.lang.Override
    public final F mFormal$a() {
        return .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl.mFormal$a(this);
    }
    
    @.java.lang.Override
    public final F mDefault$a() {
        return .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl.mDefault$a(this);
    }
    
    public final .java.lang.Object mFormal() {
        return (
            let
            {
                F $ceylontmp$f$93 = mFormal$a();
                .ceylon.language.Sequential<? extends F> $ceylontmp$fseq$94 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning mFormal($ceylontmp$f$93, $ceylontmp$fseq$94);
        );
    }
    
    public final .java.lang.Object mFormal(final F f) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends F> $ceylontmp$fseq$95 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning mFormal(f, $ceylontmp$fseq$95);
        );
    }
    
    @.java.lang.Override
    public final .java.lang.Object mFormal(final F f, final .ceylon.language.Sequential<? extends F> fseq) {
        return null;
    }
    
    public .java.lang.Object mDefault() {
        return (
            let
            {
                F $ceylontmp$f$96 = mDefault$a();
                .ceylon.language.Sequential<? extends F> $ceylontmp$fseq$97 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning mDefault$canonical$($ceylontmp$f$96, $ceylontmp$fseq$97);
        );
    }
    
    public .java.lang.Object mDefault(final F f) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends F> $ceylontmp$fseq$98 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning mDefault$canonical$(f, $ceylontmp$fseq$98);
        );
    }
    
    private .java.lang.Object mDefault$canonical$(final F f, final .ceylon.language.Sequential<? extends F> fseq) {
        return null;
    }
    
    @.java.lang.Override
    public .java.lang.Object mDefault(final F f, final .ceylon.language.Sequential<? extends F> fseq) {
        return mDefault$canonical$(f, fseq);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl.class, $reified$F);
    }
}
final class abstractImpl_ {
    
    private abstractImpl_() {
    }
    
    static void abstractImpl(final .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl conc) {
        conc.mShared();
        conc.mShared(null);
        conc.mShared(.ceylon.language.Integer.instance(1L));
        conc.mShared(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$99$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$99$argthis$ = arg$99$callable$;
                .java.lang.Object arg$99$0 = arg$99$argthis$.mShared$a();
                .ceylon.language.Sequential arg$99$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$99$callable$.mShared(arg$99$0, arg$99$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$100$callable$ = conc;
                .java.lang.Object arg$100$0 = null;
                .ceylon.language.Sequential arg$100$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$100$callable$.mShared(arg$100$0, arg$100$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$101$callable$ = conc;
                .java.lang.Object arg$101$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential arg$101$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$101$callable$.mShared(arg$101$0, arg$101$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$102$callable$ = conc;
                .java.lang.Object arg$102$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential arg$102$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$102$callable$.mShared(arg$102$0, arg$102$1);
            }
            returning null;
        );
        conc.mFormal();
        conc.mFormal(null);
        conc.mFormal(.ceylon.language.Integer.instance(1L));
        conc.mFormal(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl arg$103$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl arg$103$argthis$ = arg$103$callable$;
                .java.lang.Object arg$103$0 = arg$103$argthis$.mFormal$a();
                .ceylon.language.Sequential arg$103$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$103$callable$.mFormal(arg$103$0, arg$103$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl arg$104$callable$ = conc;
                .java.lang.Object arg$104$0 = null;
                .ceylon.language.Sequential arg$104$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$104$callable$.mFormal(arg$104$0, arg$104$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl arg$105$callable$ = conc;
                .java.lang.Object arg$105$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential arg$105$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$105$callable$.mFormal(arg$105$0, arg$105$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl arg$106$callable$ = conc;
                .java.lang.Object arg$106$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential arg$106$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$106$callable$.mFormal(arg$106$0, arg$106$1);
            }
            returning null;
        );
        conc.mDefault();
        conc.mDefault(null);
        conc.mDefault(.ceylon.language.Integer.instance(1L));
        conc.mDefault(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl arg$107$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl arg$107$argthis$ = arg$107$callable$;
                .java.lang.Object arg$107$0 = arg$107$argthis$.mDefault$a();
                .ceylon.language.Sequential arg$107$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$107$callable$.mDefault(arg$107$0, arg$107$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl arg$108$callable$ = conc;
                .java.lang.Object arg$108$0 = null;
                .ceylon.language.Sequential arg$108$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$108$callable$.mDefault(arg$108$0, arg$108$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl arg$109$callable$ = conc;
                .java.lang.Object arg$109$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential arg$109$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$109$callable$.mDefault(arg$109$0, arg$109$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl arg$110$callable$ = conc;
                .java.lang.Object arg$110$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential arg$110$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$110$callable$.mDefault(arg$110$0, arg$110$1);
            }
            returning null;
        );
    }
}
class AbstractImplSub<G> extends .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl<G> {
    
    AbstractImplSub(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$G) {
        super($reified$G);
        this.$reified$G = $reified$G;
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$G;
    
    public final .java.lang.Object mDefault() {
        return (
            let
            {
                G $ceylontmp$g$111 = mDefault$a();
                .ceylon.language.Sequential<? extends G> $ceylontmp$gseq$112 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning mDefault($ceylontmp$g$111, $ceylontmp$gseq$112);
        );
    }
    
    public final .java.lang.Object mDefault(final G g) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends G> $ceylontmp$gseq$113 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning mDefault(g, $ceylontmp$gseq$113);
        );
    }
    
    @.java.lang.Override
    public final .java.lang.Object mDefault(final G g, final .ceylon.language.Sequential<? extends G> gseq) {
        return null;
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImplSub(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImplSub.class, $reified$G);
    }
}
final class abstractImplSubCallsites_ {
    
    private abstractImplSubCallsites_() {
    }
    
    static void abstractImplSubCallsites(final .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImplSub conc) {
        conc.mShared();
        conc.mShared(null);
        conc.mShared(.ceylon.language.Integer.instance(1L));
        conc.mShared(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$114$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$114$argthis$ = arg$114$callable$;
                .java.lang.Object arg$114$0 = arg$114$argthis$.mShared$a();
                .ceylon.language.Sequential arg$114$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$114$callable$.mShared(arg$114$0, arg$114$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$115$callable$ = conc;
                .java.lang.Object arg$115$0 = null;
                .ceylon.language.Sequential arg$115$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$115$callable$.mShared(arg$115$0, arg$115$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$116$callable$ = conc;
                .java.lang.Object arg$116$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential arg$116$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$116$callable$.mShared(arg$116$0, arg$116$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete arg$117$callable$ = conc;
                .java.lang.Object arg$117$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential arg$117$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$117$callable$.mShared(arg$117$0, arg$117$1);
            }
            returning null;
        );
        conc.mFormal();
        conc.mFormal(null);
        conc.mFormal(.ceylon.language.Integer.instance(1L));
        conc.mFormal(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl arg$118$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl arg$118$argthis$ = arg$118$callable$;
                .java.lang.Object arg$118$0 = arg$118$argthis$.mFormal$a();
                .ceylon.language.Sequential arg$118$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$118$callable$.mFormal(arg$118$0, arg$118$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl arg$119$callable$ = conc;
                .java.lang.Object arg$119$0 = null;
                .ceylon.language.Sequential arg$119$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$119$callable$.mFormal(arg$119$0, arg$119$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl arg$120$callable$ = conc;
                .java.lang.Object arg$120$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential arg$120$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$120$callable$.mFormal(arg$120$0, arg$120$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl arg$121$callable$ = conc;
                .java.lang.Object arg$121$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential arg$121$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$121$callable$.mFormal(arg$121$0, arg$121$1);
            }
            returning null;
        );
        conc.mDefault();
        conc.mDefault(null);
        conc.mDefault(.ceylon.language.Integer.instance(1L));
        conc.mDefault(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImplSub arg$122$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImplSub arg$122$argthis$ = arg$122$callable$;
                .java.lang.Object arg$122$0 = arg$122$argthis$.mDefault$a();
                .ceylon.language.Sequential arg$122$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$122$callable$.mDefault(arg$122$0, arg$122$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImplSub arg$123$callable$ = conc;
                .java.lang.Object arg$123$0 = null;
                .ceylon.language.Sequential arg$123$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$123$callable$.mDefault(arg$123$0, arg$123$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImplSub arg$124$callable$ = conc;
                .java.lang.Object arg$124$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential arg$124$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$124$callable$.mDefault(arg$124$0, arg$124$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImplSub arg$125$callable$ = conc;
                .java.lang.Object arg$125$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential arg$125$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$125$callable$.mDefault(arg$125$0, arg$125$1);
            }
            returning null;
        );
    }
}