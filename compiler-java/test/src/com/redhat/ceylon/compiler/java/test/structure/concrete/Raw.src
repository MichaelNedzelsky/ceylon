package com.redhat.ceylon.compiler.java.test.structure.concrete;

interface RawInv<T, U> {
    
    public abstract T getA();
    
    public T getADefault();
    
    public void setADefault(final T aDefault);
    
    public abstract T m(final T t);
    
    public T mDefault(final T t);
    
    public abstract T mDefaulted();
    
    public abstract T mDefaulted$t();
    
    public abstract T mDefaulted(final T t);
    
    public abstract U getA2();
}
final class RawInv$impl {
    
    private RawInv$impl() {
    }
    
    static final <T, U>T getADefault(final .com.redhat.ceylon.compiler.java.test.structure.concrete.RawInv<T, U> $this, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$U) {
        throw new .ceylon.language.Exception(null, null);
    }
    
    static final <T, U>void setADefault(final .com.redhat.ceylon.compiler.java.test.structure.concrete.RawInv<T, U> $this, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$U, final T aDefault) {
    }
    
    static <T, U>T mDefault(final .com.redhat.ceylon.compiler.java.test.structure.concrete.RawInv<T, U> $this, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$U, final T t) {
        throw new .ceylon.language.Exception(null, null);
    }
    
    static <T, U>T mDefaulted$t(final .com.redhat.ceylon.compiler.java.test.structure.concrete.RawInv<T, U> $this, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$U) {
        return null;
    }
}
interface RawIn<T, U> {
    
    public abstract .java.lang.Object m(final T t);
    
    public .java.lang.Object mDefault(final T t);
    
    public abstract .java.lang.Object mDefaulted();
    
    public abstract T mDefaulted$t();
    
    public abstract .java.lang.Object mDefaulted(final T t);
    
    public abstract .java.lang.Object m2(final U u);
}
final class RawIn$impl {
    
    private RawIn$impl() {
    }
    
    static <T, U>.java.lang.Object mDefault(final .com.redhat.ceylon.compiler.java.test.structure.concrete.RawIn<? super T, U> $this, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$U, final T t) {
        return null;
    }
    
    static <T, U>T mDefaulted$t(final .com.redhat.ceylon.compiler.java.test.structure.concrete.RawIn<? super T, U> $this, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$U) {
        return null;
    }
}
class RawInImplementor<X, Y> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .com.redhat.ceylon.compiler.java.test.structure.concrete.RawIn<.java.lang.Object, Y> {
    
    RawInImplementor(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$X, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Y) {
        this.$reified$X = $reified$X;
        this.$reified$Y = $reified$Y;
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$X;
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Y;
    
    @.java.lang.Override
    public .java.lang.Object mDefault(final .java.lang.Object t) {
        return .com.redhat.ceylon.compiler.java.test.structure.concrete.RawIn$impl.mDefault(this, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.intersection($reified$X, $reified$Y), $reified$Y, t);
    }
    
    @.java.lang.Override
    public final .java.lang.Object mDefaulted$t() {
        return .com.redhat.ceylon.compiler.java.test.structure.concrete.RawIn$impl.mDefaulted$t(this, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.intersection($reified$X, $reified$Y), $reified$Y);
    }
    
    @.java.lang.Override
    public final .java.lang.Object m2(final Y u) {
        return null;
    }
    
    @.java.lang.Override
    public final .java.lang.Object m(final .java.lang.Object t) {
        return null;
    }
    
    public final .java.lang.Object mDefaulted() {
        return (
            let
            {
                .java.lang.Object $ceylontmp$t$0 = mDefaulted$t();
            }
            returning mDefaulted($ceylontmp$t$0);
        );
    }
    
    @.java.lang.Override
    public final .java.lang.Object mDefaulted(final .java.lang.Object t) {
        return null;
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.concrete.RawInImplementor(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.concrete.RawInImplementor.class, $reified$X, $reified$Y);
    }
}
interface RawOut<T, U> {
    
    public abstract T getA();
    
    public T getADefault();
    
    public abstract T m();
    
    public T mDefault();
    
    public abstract U getA2();
}
final class RawOut$impl {
    
    private RawOut$impl() {
    }
    
    static final <T, U>T getADefault(final .com.redhat.ceylon.compiler.java.test.structure.concrete.RawOut<? extends T, U> $this, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$U) {
        throw new .ceylon.language.Exception(null, null);
    }
    
    static <T, U>T mDefault(final .com.redhat.ceylon.compiler.java.test.structure.concrete.RawOut<? extends T, U> $this, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$U) {
        throw new .ceylon.language.Exception(null, null);
    }
}
class RawOutImplementor<X, Y> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .com.redhat.ceylon.compiler.java.test.structure.concrete.RawOut<.java.lang.Object, Y> {
    
    RawOutImplementor(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$X, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Y) {
        this.$reified$X = $reified$X;
        this.$reified$Y = $reified$Y;
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$X;
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Y;
    
    @.java.lang.Override
    public final .java.lang.Object getADefault() {
        return .com.redhat.ceylon.compiler.java.test.structure.concrete.RawOut$impl.getADefault(this, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.intersection($reified$X, $reified$Y), $reified$Y);
    }
    
    @.java.lang.Override
    public .java.lang.Object mDefault() {
        return .com.redhat.ceylon.compiler.java.test.structure.concrete.RawOut$impl.mDefault(this, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.intersection($reified$X, $reified$Y), $reified$Y);
    }
    
    @.java.lang.Override
    public final .java.lang.Object getA() {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final .java.lang.Object m() {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final Y getA2() {
        throw new .ceylon.language.Exception(null, null);
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.concrete.RawOutImplementor(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.concrete.RawOutImplementor.class, $reified$X, $reified$Y);
    }
}