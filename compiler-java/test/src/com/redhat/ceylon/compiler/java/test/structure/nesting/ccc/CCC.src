package com.redhat.ceylon.compiler.java.test.structure.nesting.ccc;

class C<T extends .ceylon.language.String, X extends .ceylon.language.Boolean> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    C(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$X) {
        this.$reified$T = $reified$T;
        this.$reified$X = $reified$X;
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T;
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$X;
    
    private final <U>T m1$priv$(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$U, final X b) {
        return (
            let
            {
                U $ceylontmp$u$0 = m1$u($reified$U, b);
            }
            returning m1$priv$($reified$U, b, $ceylontmp$u$0);
        );
    }
    
    private final <U>U m1$u(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$U, final X b) {
        return null;
    }
    
    private final <U>T m1$priv$(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$U, final X b, final U u) {
        throw new .ceylon.language.Exception(null, null);
    }
    
    class CC implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
        
        CC() {
        }
        
        class CCC implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
            
            CCC() {
            }
            
            private final T m2$priv$() {
                return (T)(.java.lang.Object)<.java.lang.Object>m1$priv$(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, null);
            }
            
            @.java.lang.Override
            public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.nesting.ccc.C.class, .com.redhat.ceylon.compiler.java.test.structure.nesting.ccc.C.this.$reified$T, .com.redhat.ceylon.compiler.java.test.structure.nesting.ccc.C.this.$reified$X), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.nesting.ccc.C.CC.class)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.nesting.ccc.C.CC.CCC.class));
            }
        }
        
        @.java.lang.Override
        public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.nesting.ccc.C.class, .com.redhat.ceylon.compiler.java.test.structure.nesting.ccc.C.this.$reified$T, .com.redhat.ceylon.compiler.java.test.structure.nesting.ccc.C.this.$reified$X), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.nesting.ccc.C.CC.class));
        }
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.nesting.ccc.C(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.nesting.ccc.C.class, $reified$T, $reified$X);
    }
}