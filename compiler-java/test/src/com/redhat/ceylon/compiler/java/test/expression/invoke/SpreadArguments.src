package com.redhat.ceylon.compiler.java.test.expression.invoke;

final class spreadArguments_ {
    
    private spreadArguments_() {
    }
    
    static void spreadArguments(final long i, final .java.lang.String s) {
    }
}
class SpreadArguments<T> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    SpreadArguments(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final long i, final T s) {
        this.$reified$T = $reified$T;
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T;
    
    public final void m(final long i, final T s) {
    }
    
    public final void m2(final long i) {
        (
            let
            {
                .ceylon.language.Sequential<? extends T> $ceylontmp$s$0 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                m2(i, $ceylontmp$s$0);
            }
            returning null;
        );
    }
    
    public final void m2(final long i, final .ceylon.language.Sequential<? extends T> s) {
    }
    
    public final void m3(final long i, final .ceylon.language.Sequence<? extends T> s) {
    }
    
    private final void spreadTuple$priv$(final .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>> args) {
        (
            let
            {
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>> tuple$1 = args;
                .com.redhat.ceylon.compiler.java.test.expression.invoke.spreadArguments_.spreadArguments(((.ceylon.language.Integer)tuple$1.get(.ceylon.language.Integer.instance(0L))).longValue(), ((.ceylon.language.String)tuple$1.get(.ceylon.language.Integer.instance(1L))).toString());
            }
            returning null;
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>> tuple$3 = ((.ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>)(.ceylon.language.Tuple)args).getRest();
                .com.redhat.ceylon.compiler.java.test.expression.invoke.spreadArguments_.spreadArguments(0L, ((.ceylon.language.String)tuple$3.get(.ceylon.language.Integer.instance(0L))).toString());
            }
            returning null;
        );
        (
            let
            {
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>> tuple$5 = args;
            }
            returning new .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, ((.ceylon.language.Integer)tuple$5.get(.ceylon.language.Integer.instance(0L))).longValue(), (.ceylon.language.String)tuple$5.get(.ceylon.language.Integer.instance(1L)));
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>> tuple$7 = ((.ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>)(.ceylon.language.Tuple)args).getRest();
            }
            returning new .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, 0L, (.ceylon.language.String)tuple$7.get(.ceylon.language.Integer.instance(0L)));
        );
        final .ceylon.language.Callable<? extends .java.lang.Object> f = (.ceylon.language.Callable).ceylon.language.nothing_.get_();
        (
            let
            {
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>> tuple$9 = args;
            }
            returning f.$call$((.ceylon.language.Integer)tuple$9.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.String)tuple$9.get(.ceylon.language.Integer.instance(1L)));
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>> tuple$11 = ((.ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>)(.ceylon.language.Tuple)args).getRest();
            }
            returning f.$call$(.ceylon.language.Integer.instance(1L), (.ceylon.language.String)tuple$11.get(.ceylon.language.Integer.instance(0L)));
        );
        final .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> sa = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments).ceylon.language.nothing_.get_();
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>> tuple$13 = new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Sequential<? extends .ceylon.language.Integer>>(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.Integer.instance(0L)});
                sa.m2(((.ceylon.language.Integer)tuple$13.get(.ceylon.language.Integer.instance(0L))).longValue());
            }
            returning null;
        );
        (
            let
            {
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>> tuple$15 = new .ceylon.language.Tuple(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(0L),
                        .ceylon.language.String.instance("hello")});
                sa.m2(((.ceylon.language.Integer)tuple$15.get(.ceylon.language.Integer.instance(0L))).longValue(), (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)tuple$15.spanFrom(.ceylon.language.Integer.instance(1L)));
            }
            returning null;
        );
        (
            let
            {
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>> tuple$17 = new .ceylon.language.Tuple(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(0L),
                        .ceylon.language.String.instance("hello")});
                sa.m3(((.ceylon.language.Integer)tuple$17.get(.ceylon.language.Integer.instance(0L))).longValue(), (.ceylon.language.Sequence<? extends .ceylon.language.String>)(.ceylon.language.Sequence)tuple$17.spanFrom(.ceylon.language.Integer.instance(1L)));
            }
            returning null;
        );
        (
            let
            {
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>> tuple$19 = new .ceylon.language.Tuple(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(0L),
                        .ceylon.language.String.instance("hello"),
                        .ceylon.language.String.instance("world")});
                sa.m2(((.ceylon.language.Integer)tuple$19.get(.ceylon.language.Integer.instance(0L))).longValue(), (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)tuple$19.spanFrom(.ceylon.language.Integer.instance(1L)));
            }
            returning null;
        );
        (
            let
            {
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>> tuple$21 = new .ceylon.language.Tuple(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(0L),
                        .ceylon.language.String.instance("hello"),
                        .ceylon.language.String.instance("world")});
                sa.m3(((.ceylon.language.Integer)tuple$21.get(.ceylon.language.Integer.instance(0L))).longValue(), (.ceylon.language.Sequence<? extends .ceylon.language.String>)(.ceylon.language.Sequence)tuple$21.spanFrom(.ceylon.language.Integer.instance(1L)));
            }
            returning null;
        );
        final .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequence<? extends .ceylon.language.String>>> t = (.ceylon.language.Tuple).ceylon.language.nothing_.get_();
        (
            let
            {
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequence<? extends .ceylon.language.String>>> tuple$23 = t;
                sa.m2(((.ceylon.language.Integer)tuple$23.get(.ceylon.language.Integer.instance(0L))).longValue(), (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)tuple$23.spanFrom(.ceylon.language.Integer.instance(1L)));
            }
            returning null;
        );
        (
            let
            {
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequence<? extends .ceylon.language.String>>> tuple$25 = t;
                sa.m3(((.ceylon.language.Integer)tuple$25.get(.ceylon.language.Integer.instance(0L))).longValue(), (.ceylon.language.Sequence<? extends .ceylon.language.String>)(.ceylon.language.Sequence)tuple$25.spanFrom(.ceylon.language.Integer.instance(1L)));
            }
            returning null;
        );
    }
    
    private final void spreadTupleWithSpreadOp$priv$(final .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>> args) {
        final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> iter = (.ceylon.language.Iterable).ceylon.language.nothing_.get_();
        (
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> spread$27$iterable$ = iter;
                .ceylon.language.SequenceBuilder<.java.lang.Object> spread$27$sb$ = new .ceylon.language.SequenceBuilder<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$);
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>> tuple$28 = args;
                long spread$27$arg$0 = ((.ceylon.language.Integer)tuple$28.get(.ceylon.language.Integer.instance(0L))).longValue();
                .ceylon.language.String spread$27$arg$1 = (.ceylon.language.String)tuple$28.get(.ceylon.language.Integer.instance(1L));
                final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> iterable$29 = spread$27$iterable$;
                final boolean isArray$30 = iterable$29 instanceof .ceylon.language.Array;
                final boolean isArraySequence$31 = iterable$29 instanceof .ceylon.language.ArraySequence;
                .java.lang.Object spread$27$iteration$ = null;
                final .java.lang.Object array$32;
                int i$33 = 0;
                final int length$34;
                if (isArraySequence$31) {
                    array$32 = ((.ceylon.language.ArraySequence)iterable$29).$getArray$();
                    i$33 = ((.ceylon.language.ArraySequence)iterable$29).$getFirst$();
                    length$34 = i$33 + ((.ceylon.language.ArraySequence)iterable$29).$getLength$();
                } else if (isArray$30) {
                    array$32 = ((.ceylon.language.Array)iterable$29).toArray();
                    length$34 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$32);
                } else {
                    array$32 = null;
                    length$34 = 0;
                }
                .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> spread$27$iterator$ = isArraySequence$31 || isArray$30 ? null : iterable$29.iterator();
                while (isArraySequence$31 || isArray$30 ? i$33 < length$34 : !((spread$27$iteration$ = spread$27$iterator$.next()) instanceof .ceylon.language.Finished)) {
                    if (isArraySequence$31 || isArray$30) spread$27$iteration$ = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$32, i$33++);
                    .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> spread$27$element$ = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)spread$27$iteration$;
                    spread$27$sb$.append((
                        let
                        {
                            spread$27$element$.m(spread$27$arg$0, spread$27$arg$1);
                        }
                        returning null;
                    ));
                }
            }
            returning spread$27$sb$.getSequence();
        );
        (
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> spread$35$iterable$ = iter;
                .ceylon.language.SequenceBuilder<.java.lang.Object> spread$35$sb$ = new .ceylon.language.SequenceBuilder<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$);
                .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>> tuple$36 = ((.ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>)(.ceylon.language.Tuple)args).getRest();
                long spread$35$arg$0 = 0L;
                .ceylon.language.String spread$35$arg$1 = (.ceylon.language.String)tuple$36.get(.ceylon.language.Integer.instance(0L));
                final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> iterable$37 = spread$35$iterable$;
                final boolean isArray$38 = iterable$37 instanceof .ceylon.language.Array;
                final boolean isArraySequence$39 = iterable$37 instanceof .ceylon.language.ArraySequence;
                .java.lang.Object spread$35$iteration$ = null;
                final .java.lang.Object array$40;
                int i$41 = 0;
                final int length$42;
                if (isArraySequence$39) {
                    array$40 = ((.ceylon.language.ArraySequence)iterable$37).$getArray$();
                    i$41 = ((.ceylon.language.ArraySequence)iterable$37).$getFirst$();
                    length$42 = i$41 + ((.ceylon.language.ArraySequence)iterable$37).$getLength$();
                } else if (isArray$38) {
                    array$40 = ((.ceylon.language.Array)iterable$37).toArray();
                    length$42 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$40);
                } else {
                    array$40 = null;
                    length$42 = 0;
                }
                .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> spread$35$iterator$ = isArraySequence$39 || isArray$38 ? null : iterable$37.iterator();
                while (isArraySequence$39 || isArray$38 ? i$41 < length$42 : !((spread$35$iteration$ = spread$35$iterator$.next()) instanceof .ceylon.language.Finished)) {
                    if (isArraySequence$39 || isArray$38) spread$35$iteration$ = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$40, i$41++);
                    .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> spread$35$element$ = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)spread$35$iteration$;
                    spread$35$sb$.append((
                        let
                        {
                            spread$35$element$.m(spread$35$arg$0, spread$35$arg$1);
                        }
                        returning null;
                    ));
                }
            }
            returning spread$35$sb$.getSequence();
        );
        (
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> spread$43$iterable$ = iter;
                .ceylon.language.SequenceBuilder<.java.lang.Object> spread$43$sb$ = new .ceylon.language.SequenceBuilder<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$);
                long spread$43$arg$0 = 0L;
                .ceylon.language.Sequential<? extends .ceylon.language.String> spread$43$arg$1 = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)((.ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>)(.ceylon.language.Tuple)args).getRest();
                final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> iterable$44 = spread$43$iterable$;
                final boolean isArray$45 = iterable$44 instanceof .ceylon.language.Array;
                final boolean isArraySequence$46 = iterable$44 instanceof .ceylon.language.ArraySequence;
                .java.lang.Object spread$43$iteration$ = null;
                final .java.lang.Object array$47;
                int i$48 = 0;
                final int length$49;
                if (isArraySequence$46) {
                    array$47 = ((.ceylon.language.ArraySequence)iterable$44).$getArray$();
                    i$48 = ((.ceylon.language.ArraySequence)iterable$44).$getFirst$();
                    length$49 = i$48 + ((.ceylon.language.ArraySequence)iterable$44).$getLength$();
                } else if (isArray$45) {
                    array$47 = ((.ceylon.language.Array)iterable$44).toArray();
                    length$49 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$47);
                } else {
                    array$47 = null;
                    length$49 = 0;
                }
                .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> spread$43$iterator$ = isArraySequence$46 || isArray$45 ? null : iterable$44.iterator();
                while (isArraySequence$46 || isArray$45 ? i$48 < length$49 : !((spread$43$iteration$ = spread$43$iterator$.next()) instanceof .ceylon.language.Finished)) {
                    if (isArraySequence$46 || isArray$45) spread$43$iteration$ = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$47, i$48++);
                    .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> spread$43$element$ = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)spread$43$iteration$;
                    spread$43$sb$.append((
                        let
                        {
                            spread$43$element$.m2(spread$43$arg$0, spread$43$arg$1);
                        }
                        returning null;
                    ));
                }
            }
            returning spread$43$sb$.getSequence();
        );
        (
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> spread$50$iterable$ = iter;
                .ceylon.language.SequenceBuilder<.java.lang.Object> spread$50$sb$ = new .ceylon.language.SequenceBuilder<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$);
                long spread$50$arg$0 = 0L;
                .ceylon.language.Sequence<? extends .ceylon.language.String> spread$50$arg$1 = (.ceylon.language.Sequence<? extends .ceylon.language.String>)(.ceylon.language.Sequence)((.ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>)(.ceylon.language.Tuple)args).getRest();
                final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> iterable$51 = spread$50$iterable$;
                final boolean isArray$52 = iterable$51 instanceof .ceylon.language.Array;
                final boolean isArraySequence$53 = iterable$51 instanceof .ceylon.language.ArraySequence;
                .java.lang.Object spread$50$iteration$ = null;
                final .java.lang.Object array$54;
                int i$55 = 0;
                final int length$56;
                if (isArraySequence$53) {
                    array$54 = ((.ceylon.language.ArraySequence)iterable$51).$getArray$();
                    i$55 = ((.ceylon.language.ArraySequence)iterable$51).$getFirst$();
                    length$56 = i$55 + ((.ceylon.language.ArraySequence)iterable$51).$getLength$();
                } else if (isArray$52) {
                    array$54 = ((.ceylon.language.Array)iterable$51).toArray();
                    length$56 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$54);
                } else {
                    array$54 = null;
                    length$56 = 0;
                }
                .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> spread$50$iterator$ = isArraySequence$53 || isArray$52 ? null : iterable$51.iterator();
                while (isArraySequence$53 || isArray$52 ? i$55 < length$56 : !((spread$50$iteration$ = spread$50$iterator$.next()) instanceof .ceylon.language.Finished)) {
                    if (isArraySequence$53 || isArray$52) spread$50$iteration$ = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$54, i$55++);
                    .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> spread$50$element$ = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)spread$50$iteration$;
                    spread$50$sb$.append((
                        let
                        {
                            spread$50$element$.m3(spread$50$arg$0, spread$50$arg$1);
                        }
                        returning null;
                    ));
                }
            }
            returning spread$50$sb$.getSequence();
        );
        (
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> spread$57$iterable$ = iter;
                .ceylon.language.SequenceBuilder<.java.lang.Object> spread$57$sb$ = new .ceylon.language.SequenceBuilder<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$);
                long spread$57$arg$0 = 0L;
                .ceylon.language.Sequential<? extends .ceylon.language.String> spread$57$arg$1 = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)((.ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>)(.ceylon.language.Tuple)((.ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>)(.ceylon.language.Tuple)args).getRest()).getRest();
                final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> iterable$58 = spread$57$iterable$;
                final boolean isArray$59 = iterable$58 instanceof .ceylon.language.Array;
                final boolean isArraySequence$60 = iterable$58 instanceof .ceylon.language.ArraySequence;
                .java.lang.Object spread$57$iteration$ = null;
                final .java.lang.Object array$61;
                int i$62 = 0;
                final int length$63;
                if (isArraySequence$60) {
                    array$61 = ((.ceylon.language.ArraySequence)iterable$58).$getArray$();
                    i$62 = ((.ceylon.language.ArraySequence)iterable$58).$getFirst$();
                    length$63 = i$62 + ((.ceylon.language.ArraySequence)iterable$58).$getLength$();
                } else if (isArray$59) {
                    array$61 = ((.ceylon.language.Array)iterable$58).toArray();
                    length$63 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$61);
                } else {
                    array$61 = null;
                    length$63 = 0;
                }
                .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> spread$57$iterator$ = isArraySequence$60 || isArray$59 ? null : iterable$58.iterator();
                while (isArraySequence$60 || isArray$59 ? i$62 < length$63 : !((spread$57$iteration$ = spread$57$iterator$.next()) instanceof .ceylon.language.Finished)) {
                    if (isArraySequence$60 || isArray$59) spread$57$iteration$ = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$61, i$62++);
                    .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> spread$57$element$ = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)spread$57$iteration$;
                    spread$57$sb$.append((
                        let
                        {
                            spread$57$element$.m2(spread$57$arg$0, spread$57$arg$1);
                        }
                        returning null;
                    ));
                }
            }
            returning spread$57$sb$.getSequence();
        );
        (
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> spread$64$iterable$ = iter;
                .ceylon.language.SequenceBuilder<.java.lang.Object> spread$64$sb$ = new .ceylon.language.SequenceBuilder<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$);
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>> tuple$65 = new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Sequential<? extends .ceylon.language.Integer>>(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.Integer.instance(0L)});
                long spread$64$arg$0 = ((.ceylon.language.Integer)tuple$65.get(.ceylon.language.Integer.instance(0L))).longValue();
                final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> iterable$66 = spread$64$iterable$;
                final boolean isArray$67 = iterable$66 instanceof .ceylon.language.Array;
                final boolean isArraySequence$68 = iterable$66 instanceof .ceylon.language.ArraySequence;
                .java.lang.Object spread$64$iteration$ = null;
                final .java.lang.Object array$69;
                int i$70 = 0;
                final int length$71;
                if (isArraySequence$68) {
                    array$69 = ((.ceylon.language.ArraySequence)iterable$66).$getArray$();
                    i$70 = ((.ceylon.language.ArraySequence)iterable$66).$getFirst$();
                    length$71 = i$70 + ((.ceylon.language.ArraySequence)iterable$66).$getLength$();
                } else if (isArray$67) {
                    array$69 = ((.ceylon.language.Array)iterable$66).toArray();
                    length$71 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$69);
                } else {
                    array$69 = null;
                    length$71 = 0;
                }
                .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> spread$64$iterator$ = isArraySequence$68 || isArray$67 ? null : iterable$66.iterator();
                while (isArraySequence$68 || isArray$67 ? i$70 < length$71 : !((spread$64$iteration$ = spread$64$iterator$.next()) instanceof .ceylon.language.Finished)) {
                    if (isArraySequence$68 || isArray$67) spread$64$iteration$ = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$69, i$70++);
                    .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> spread$64$element$ = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)spread$64$iteration$;
                    spread$64$sb$.append((
                        let
                        {
                            spread$64$element$.m2(spread$64$arg$0);
                        }
                        returning null;
                    ));
                }
            }
            returning spread$64$sb$.getSequence();
        );
        (
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> spread$72$iterable$ = iter;
                .ceylon.language.SequenceBuilder<.java.lang.Object> spread$72$sb$ = new .ceylon.language.SequenceBuilder<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$);
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>> tuple$73 = new .ceylon.language.Tuple(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(0L),
                        .ceylon.language.String.instance("hello")});
                long spread$72$arg$0 = ((.ceylon.language.Integer)tuple$73.get(.ceylon.language.Integer.instance(0L))).longValue();
                .ceylon.language.Sequential<? extends .ceylon.language.String> spread$72$arg$1 = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)tuple$73.spanFrom(.ceylon.language.Integer.instance(1L));
                final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> iterable$74 = spread$72$iterable$;
                final boolean isArray$75 = iterable$74 instanceof .ceylon.language.Array;
                final boolean isArraySequence$76 = iterable$74 instanceof .ceylon.language.ArraySequence;
                .java.lang.Object spread$72$iteration$ = null;
                final .java.lang.Object array$77;
                int i$78 = 0;
                final int length$79;
                if (isArraySequence$76) {
                    array$77 = ((.ceylon.language.ArraySequence)iterable$74).$getArray$();
                    i$78 = ((.ceylon.language.ArraySequence)iterable$74).$getFirst$();
                    length$79 = i$78 + ((.ceylon.language.ArraySequence)iterable$74).$getLength$();
                } else if (isArray$75) {
                    array$77 = ((.ceylon.language.Array)iterable$74).toArray();
                    length$79 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$77);
                } else {
                    array$77 = null;
                    length$79 = 0;
                }
                .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> spread$72$iterator$ = isArraySequence$76 || isArray$75 ? null : iterable$74.iterator();
                while (isArraySequence$76 || isArray$75 ? i$78 < length$79 : !((spread$72$iteration$ = spread$72$iterator$.next()) instanceof .ceylon.language.Finished)) {
                    if (isArraySequence$76 || isArray$75) spread$72$iteration$ = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$77, i$78++);
                    .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> spread$72$element$ = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)spread$72$iteration$;
                    spread$72$sb$.append((
                        let
                        {
                            spread$72$element$.m2(spread$72$arg$0, spread$72$arg$1);
                        }
                        returning null;
                    ));
                }
            }
            returning spread$72$sb$.getSequence();
        );
        (
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> spread$80$iterable$ = iter;
                .ceylon.language.SequenceBuilder<.java.lang.Object> spread$80$sb$ = new .ceylon.language.SequenceBuilder<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$);
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>> tuple$81 = new .ceylon.language.Tuple(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(0L),
                        .ceylon.language.String.instance("hello")});
                long spread$80$arg$0 = ((.ceylon.language.Integer)tuple$81.get(.ceylon.language.Integer.instance(0L))).longValue();
                .ceylon.language.Sequence<? extends .ceylon.language.String> spread$80$arg$1 = (.ceylon.language.Sequence<? extends .ceylon.language.String>)(.ceylon.language.Sequence)tuple$81.spanFrom(.ceylon.language.Integer.instance(1L));
                final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> iterable$82 = spread$80$iterable$;
                final boolean isArray$83 = iterable$82 instanceof .ceylon.language.Array;
                final boolean isArraySequence$84 = iterable$82 instanceof .ceylon.language.ArraySequence;
                .java.lang.Object spread$80$iteration$ = null;
                final .java.lang.Object array$85;
                int i$86 = 0;
                final int length$87;
                if (isArraySequence$84) {
                    array$85 = ((.ceylon.language.ArraySequence)iterable$82).$getArray$();
                    i$86 = ((.ceylon.language.ArraySequence)iterable$82).$getFirst$();
                    length$87 = i$86 + ((.ceylon.language.ArraySequence)iterable$82).$getLength$();
                } else if (isArray$83) {
                    array$85 = ((.ceylon.language.Array)iterable$82).toArray();
                    length$87 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$85);
                } else {
                    array$85 = null;
                    length$87 = 0;
                }
                .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> spread$80$iterator$ = isArraySequence$84 || isArray$83 ? null : iterable$82.iterator();
                while (isArraySequence$84 || isArray$83 ? i$86 < length$87 : !((spread$80$iteration$ = spread$80$iterator$.next()) instanceof .ceylon.language.Finished)) {
                    if (isArraySequence$84 || isArray$83) spread$80$iteration$ = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$85, i$86++);
                    .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> spread$80$element$ = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)spread$80$iteration$;
                    spread$80$sb$.append((
                        let
                        {
                            spread$80$element$.m3(spread$80$arg$0, spread$80$arg$1);
                        }
                        returning null;
                    ));
                }
            }
            returning spread$80$sb$.getSequence();
        );
        (
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> spread$88$iterable$ = iter;
                .ceylon.language.SequenceBuilder<.java.lang.Object> spread$88$sb$ = new .ceylon.language.SequenceBuilder<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$);
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>> tuple$89 = new .ceylon.language.Tuple(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(0L),
                        .ceylon.language.String.instance("hello"),
                        .ceylon.language.String.instance("world")});
                long spread$88$arg$0 = ((.ceylon.language.Integer)tuple$89.get(.ceylon.language.Integer.instance(0L))).longValue();
                .ceylon.language.Sequential<? extends .ceylon.language.String> spread$88$arg$1 = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)tuple$89.spanFrom(.ceylon.language.Integer.instance(1L));
                final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> iterable$90 = spread$88$iterable$;
                final boolean isArray$91 = iterable$90 instanceof .ceylon.language.Array;
                final boolean isArraySequence$92 = iterable$90 instanceof .ceylon.language.ArraySequence;
                .java.lang.Object spread$88$iteration$ = null;
                final .java.lang.Object array$93;
                int i$94 = 0;
                final int length$95;
                if (isArraySequence$92) {
                    array$93 = ((.ceylon.language.ArraySequence)iterable$90).$getArray$();
                    i$94 = ((.ceylon.language.ArraySequence)iterable$90).$getFirst$();
                    length$95 = i$94 + ((.ceylon.language.ArraySequence)iterable$90).$getLength$();
                } else if (isArray$91) {
                    array$93 = ((.ceylon.language.Array)iterable$90).toArray();
                    length$95 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$93);
                } else {
                    array$93 = null;
                    length$95 = 0;
                }
                .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> spread$88$iterator$ = isArraySequence$92 || isArray$91 ? null : iterable$90.iterator();
                while (isArraySequence$92 || isArray$91 ? i$94 < length$95 : !((spread$88$iteration$ = spread$88$iterator$.next()) instanceof .ceylon.language.Finished)) {
                    if (isArraySequence$92 || isArray$91) spread$88$iteration$ = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$93, i$94++);
                    .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> spread$88$element$ = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)spread$88$iteration$;
                    spread$88$sb$.append((
                        let
                        {
                            spread$88$element$.m2(spread$88$arg$0, spread$88$arg$1);
                        }
                        returning null;
                    ));
                }
            }
            returning spread$88$sb$.getSequence();
        );
        (
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> spread$96$iterable$ = iter;
                .ceylon.language.SequenceBuilder<.java.lang.Object> spread$96$sb$ = new .ceylon.language.SequenceBuilder<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$);
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>> tuple$97 = new .ceylon.language.Tuple(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(0L),
                        .ceylon.language.String.instance("hello"),
                        .ceylon.language.String.instance("world")});
                long spread$96$arg$0 = ((.ceylon.language.Integer)tuple$97.get(.ceylon.language.Integer.instance(0L))).longValue();
                .ceylon.language.Sequence<? extends .ceylon.language.String> spread$96$arg$1 = (.ceylon.language.Sequence<? extends .ceylon.language.String>)(.ceylon.language.Sequence)tuple$97.spanFrom(.ceylon.language.Integer.instance(1L));
                final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> iterable$98 = spread$96$iterable$;
                final boolean isArray$99 = iterable$98 instanceof .ceylon.language.Array;
                final boolean isArraySequence$100 = iterable$98 instanceof .ceylon.language.ArraySequence;
                .java.lang.Object spread$96$iteration$ = null;
                final .java.lang.Object array$101;
                int i$102 = 0;
                final int length$103;
                if (isArraySequence$100) {
                    array$101 = ((.ceylon.language.ArraySequence)iterable$98).$getArray$();
                    i$102 = ((.ceylon.language.ArraySequence)iterable$98).$getFirst$();
                    length$103 = i$102 + ((.ceylon.language.ArraySequence)iterable$98).$getLength$();
                } else if (isArray$99) {
                    array$101 = ((.ceylon.language.Array)iterable$98).toArray();
                    length$103 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$101);
                } else {
                    array$101 = null;
                    length$103 = 0;
                }
                .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> spread$96$iterator$ = isArraySequence$100 || isArray$99 ? null : iterable$98.iterator();
                while (isArraySequence$100 || isArray$99 ? i$102 < length$103 : !((spread$96$iteration$ = spread$96$iterator$.next()) instanceof .ceylon.language.Finished)) {
                    if (isArraySequence$100 || isArray$99) spread$96$iteration$ = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$101, i$102++);
                    .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> spread$96$element$ = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)spread$96$iteration$;
                    spread$96$sb$.append((
                        let
                        {
                            spread$96$element$.m3(spread$96$arg$0, spread$96$arg$1);
                        }
                        returning null;
                    ));
                }
            }
            returning spread$96$sb$.getSequence();
        );
    }
    
    public final void m4() {
        (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> $ceylontmp$i$104 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                m4($ceylontmp$i$104);
            }
            returning null;
        );
    }
    
    public final void m4(final .ceylon.language.Sequential<? extends .ceylon.language.Integer> i) {
    }
    
    private final void spreadIterator$priv$(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> iter, final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> nonEmptyIter) {
        m4(iter.getSequence());
        m4(nonEmptyIter.getSequence());
    }
    
    private final void spreadIteratorWithSpreadOp$priv$(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> iter, final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> nonEmptyIter) {
        final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> sas = (.ceylon.language.Iterable).ceylon.language.nothing_.get_();
        (
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> spread$105$iterable$ = sas;
                .ceylon.language.SequenceBuilder<.java.lang.Object> spread$105$sb$ = new .ceylon.language.SequenceBuilder<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$);
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> spread$105$arg$0 = iter.getSequence();
                final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> iterable$106 = spread$105$iterable$;
                final boolean isArray$107 = iterable$106 instanceof .ceylon.language.Array;
                final boolean isArraySequence$108 = iterable$106 instanceof .ceylon.language.ArraySequence;
                .java.lang.Object spread$105$iteration$ = null;
                final .java.lang.Object array$109;
                int i$110 = 0;
                final int length$111;
                if (isArraySequence$108) {
                    array$109 = ((.ceylon.language.ArraySequence)iterable$106).$getArray$();
                    i$110 = ((.ceylon.language.ArraySequence)iterable$106).$getFirst$();
                    length$111 = i$110 + ((.ceylon.language.ArraySequence)iterable$106).$getLength$();
                } else if (isArray$107) {
                    array$109 = ((.ceylon.language.Array)iterable$106).toArray();
                    length$111 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$109);
                } else {
                    array$109 = null;
                    length$111 = 0;
                }
                .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> spread$105$iterator$ = isArraySequence$108 || isArray$107 ? null : iterable$106.iterator();
                while (isArraySequence$108 || isArray$107 ? i$110 < length$111 : !((spread$105$iteration$ = spread$105$iterator$.next()) instanceof .ceylon.language.Finished)) {
                    if (isArraySequence$108 || isArray$107) spread$105$iteration$ = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$109, i$110++);
                    .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> spread$105$element$ = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)spread$105$iteration$;
                    spread$105$sb$.append((
                        let
                        {
                            spread$105$element$.m4(spread$105$arg$0);
                        }
                        returning null;
                    ));
                }
            }
            returning spread$105$sb$.getSequence();
        );
        (
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> spread$112$iterable$ = sas;
                .ceylon.language.SequenceBuilder<.java.lang.Object> spread$112$sb$ = new .ceylon.language.SequenceBuilder<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$);
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> spread$112$arg$0 = nonEmptyIter.getSequence();
                final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> iterable$113 = spread$112$iterable$;
                final boolean isArray$114 = iterable$113 instanceof .ceylon.language.Array;
                final boolean isArraySequence$115 = iterable$113 instanceof .ceylon.language.ArraySequence;
                .java.lang.Object spread$112$iteration$ = null;
                final .java.lang.Object array$116;
                int i$117 = 0;
                final int length$118;
                if (isArraySequence$115) {
                    array$116 = ((.ceylon.language.ArraySequence)iterable$113).$getArray$();
                    i$117 = ((.ceylon.language.ArraySequence)iterable$113).$getFirst$();
                    length$118 = i$117 + ((.ceylon.language.ArraySequence)iterable$113).$getLength$();
                } else if (isArray$114) {
                    array$116 = ((.ceylon.language.Array)iterable$113).toArray();
                    length$118 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$116);
                } else {
                    array$116 = null;
                    length$118 = 0;
                }
                .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> spread$112$iterator$ = isArraySequence$115 || isArray$114 ? null : iterable$113.iterator();
                while (isArraySequence$115 || isArray$114 ? i$117 < length$118 : !((spread$112$iteration$ = spread$112$iterator$.next()) instanceof .ceylon.language.Finished)) {
                    if (isArraySequence$115 || isArray$114) spread$112$iteration$ = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$116, i$117++);
                    .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> spread$112$element$ = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)spread$112$iteration$;
                    spread$112$sb$.append((
                        let
                        {
                            spread$112$element$.m4(spread$112$arg$0);
                        }
                        returning null;
                    ));
                }
            }
            returning spread$112$sb$.getSequence();
        );
    }
    
    private final void spreadTupleWithDefaultedAndSequenced$priv$() {
        final .ceylon.language.Callable<? extends .ceylon.language.Integer> f = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Empty.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Integer.$TypeDescriptor$)))), "Integer(Integer, Integer=, Integer*)", (short)2){
            
            private final long $default$b(final long a) {
                return 2L;
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $callvariadic$(final .ceylon.language.Sequential $param$0) {
                final long a = ((.ceylon.language.Integer)$param$0.get(.ceylon.language.Integer.instance(0))).longValue();
                final long b = ((.ceylon.language.Integer)$param$0.get(.ceylon.language.Integer.instance(1))).longValue();
                final .ceylon.language.Sequential<? extends .ceylon.language.Integer> c = (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)$param$0.spanFrom(.ceylon.language.Integer.instance(2));
                return $calltyped$(a, b, c);
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $call$(final .java.lang.Object $param$0) {
                final long a = ((.ceylon.language.Integer)$param$0).longValue();
                final long b = $default$b(a);
                final .ceylon.language.Sequential<? extends .ceylon.language.Integer> c$variadic$ = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                return $calltyped$(a, b, c$variadic$);
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $callvariadic$(final .java.lang.Object $param$0, final .ceylon.language.Sequential $param$1) {
                final long a = ((.ceylon.language.Integer)$param$0).longValue();
                final long b = $default$b(a);
                return $calltyped$(a, b, (.ceylon.language.Sequential).ceylon.language.empty_.get_());
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                final long a = ((.ceylon.language.Integer)$param$0).longValue();
                final long b = ((.ceylon.language.Integer)$param$1).longValue();
                final .ceylon.language.Sequential<? extends .ceylon.language.Integer> c$variadic$ = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                return $calltyped$(a, b, c$variadic$);
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .ceylon.language.Sequential $param$2) {
                final long a = ((.ceylon.language.Integer)$param$0).longValue();
                final long b = ((.ceylon.language.Integer)$param$1).longValue();
                final .ceylon.language.Sequential<? extends .ceylon.language.Integer> c = (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)$param$2;
                return $calltyped$(a, b, c);
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                final long a = ((.ceylon.language.Integer)$param$0).longValue();
                final long b = ((.ceylon.language.Integer)$param$1).longValue();
                final .ceylon.language.Sequential<? extends .ceylon.language.Integer> c$variadic$ = .ceylon.language.ArraySequence.<.ceylon.language.Integer>instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{$param$2});
                return $calltyped$(a, b, c$variadic$);
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                final long a = ((.ceylon.language.Integer)$param$0).longValue();
                final long b = ((.ceylon.language.Integer)$param$1).longValue();
                return $calltyped$(a, b, $spreadVarargs$(.ceylon.language.Integer.$TypeDescriptor$, 0, 1, new .java.lang.Object[]{(.ceylon.language.Integer)$param$2}, $param$3));
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $call$(final .java.lang.Object... $param$0) {
                final long a = ((.ceylon.language.Integer)$param$0[0]).longValue();
                final long b = $param$0.length > 1 ? ((.ceylon.language.Integer)$param$0[1]).longValue() : $default$b(a);
                return $calltyped$(a, b, $spreadVarargs$(.ceylon.language.Integer.$TypeDescriptor$, 2, $param$0.length - 2, $param$0, .ceylon.language.empty_.get_()));
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $callvariadic$(final .java.lang.Object... $param$0) {
                final long a = ((.ceylon.language.Integer)$param$0[0]).longValue();
                final long b = $param$0.length > 1 ? ((.ceylon.language.Integer)$param$0[1]).longValue() : $default$b(a);
                return $calltyped$(a, b, $spreadVarargs$(.ceylon.language.Integer.$TypeDescriptor$, 1, $param$0));
            }
            
            private .ceylon.language.Integer $calltyped$(long a, long b, .ceylon.language.Sequential<? extends .ceylon.language.Integer> c) {
                return .ceylon.language.Integer.instance(1L);
            }
        };
        final .ceylon.language.Callable<? extends .ceylon.language.Integer> f2 = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequence.class, .ceylon.language.Integer.$TypeDescriptor$))), "Integer(Integer, Integer, Integer+)", (short)2){
            
            @.java.lang.Override
            public .ceylon.language.Integer $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .ceylon.language.Sequential $param$2) {
                final long a = ((.ceylon.language.Integer)$param$0).longValue();
                final long b = ((.ceylon.language.Integer)$param$1).longValue();
                final .ceylon.language.Sequence<? extends .ceylon.language.Integer> c = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence)$param$2;
                return $calltyped$(a, b, c);
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                final long a = ((.ceylon.language.Integer)$param$0).longValue();
                final long b = ((.ceylon.language.Integer)$param$1).longValue();
                final .ceylon.language.Sequence<? extends .ceylon.language.Integer> c$variadic$ = .ceylon.language.ArraySequence.<.ceylon.language.Integer>instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{$param$2});
                return $calltyped$(a, b, c$variadic$);
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                final long a = ((.ceylon.language.Integer)$param$0).longValue();
                final long b = ((.ceylon.language.Integer)$param$1).longValue();
                return $calltyped$(a, b, (.ceylon.language.Sequence)$spreadVarargs$(.ceylon.language.Integer.$TypeDescriptor$, 0, 1, new .java.lang.Object[]{(.ceylon.language.Integer)$param$2}, $param$3));
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $call$(final .java.lang.Object... $param$0) {
                final long a = ((.ceylon.language.Integer)$param$0[0]).longValue();
                final long b = ((.ceylon.language.Integer)$param$0[1]).longValue();
                return $calltyped$(a, b, (.ceylon.language.Sequence)$spreadVarargs$(.ceylon.language.Integer.$TypeDescriptor$, 2, $param$0.length - 2, $param$0, .ceylon.language.empty_.get_()));
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $callvariadic$(final .java.lang.Object... $param$0) {
                final long a = ((.ceylon.language.Integer)$param$0[0]).longValue();
                final long b = ((.ceylon.language.Integer)$param$0[1]).longValue();
                return $calltyped$(a, b, (.ceylon.language.Sequence)$spreadVarargs$(.ceylon.language.Integer.$TypeDescriptor$, 3, $param$0));
            }
            
            private .ceylon.language.Integer $calltyped$(long a, long b, .ceylon.language.Sequence<? extends .ceylon.language.Integer> c) {
                return .ceylon.language.Integer.instance(1L);
            }
        };
        final .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>> one = new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Sequential<? extends .ceylon.language.Integer>>(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.Integer.instance(1L)});
        final .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>> two = new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Integer.instance(2L)});
        final .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>> three = new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>>(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Integer.instance(2L),
                .ceylon.language.Integer.instance(3L)});
        final .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>>> four = new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>>>(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Integer.instance(2L),
                .ceylon.language.Integer.instance(3L),
                .ceylon.language.Integer.instance(4L)});
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>> tuple$119 = one;
            }
            returning f.$callvariadic$((.ceylon.language.Integer)tuple$119.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Sequential).ceylon.language.empty_.get_());
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>> tuple$121 = two;
            }
            returning f.$callvariadic$((.ceylon.language.Integer)tuple$121.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Integer)tuple$121.get(.ceylon.language.Integer.instance(1L)), (.ceylon.language.Sequential).ceylon.language.empty_.get_());
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>> tuple$123 = three;
            }
            returning f.$callvariadic$((.ceylon.language.Integer)tuple$123.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Integer)tuple$123.get(.ceylon.language.Integer.instance(1L)), (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)tuple$123.spanFrom(.ceylon.language.Integer.instance(2L)));
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>> tuple$125 = three;
            }
            returning f2.$callvariadic$((.ceylon.language.Integer)tuple$125.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Integer)tuple$125.get(.ceylon.language.Integer.instance(1L)), (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence)tuple$125.spanFrom(.ceylon.language.Integer.instance(2L)));
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>>> tuple$127 = four;
            }
            returning f.$callvariadic$((.ceylon.language.Integer)tuple$127.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Integer)tuple$127.get(.ceylon.language.Integer.instance(1L)), (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)tuple$127.spanFrom(.ceylon.language.Integer.instance(2L)));
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>>> tuple$129 = four;
            }
            returning f2.$callvariadic$((.ceylon.language.Integer)tuple$129.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Integer)tuple$129.get(.ceylon.language.Integer.instance(1L)), (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence)tuple$129.spanFrom(.ceylon.language.Integer.instance(2L)));
        );
        (
            let
            {
                .ceylon.language.empty_ tuple$131 = .ceylon.language.empty_.get_();
            }
            returning f.$callvariadic$(.ceylon.language.Integer.instance(1L), (.ceylon.language.Sequential).ceylon.language.empty_.get_());
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>> tuple$133 = one;
            }
            returning f.$callvariadic$(.ceylon.language.Integer.instance(1L), (.ceylon.language.Integer)tuple$133.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Sequential).ceylon.language.empty_.get_());
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>> tuple$135 = two;
            }
            returning f.$callvariadic$(.ceylon.language.Integer.instance(1L), (.ceylon.language.Integer)tuple$135.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)tuple$135.spanFrom(.ceylon.language.Integer.instance(1L)));
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>> tuple$137 = two;
            }
            returning f2.$callvariadic$(.ceylon.language.Integer.instance(1L), (.ceylon.language.Integer)tuple$137.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence)tuple$137.spanFrom(.ceylon.language.Integer.instance(1L)));
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>> tuple$139 = three;
            }
            returning f.$callvariadic$(.ceylon.language.Integer.instance(1L), (.ceylon.language.Integer)tuple$139.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)tuple$139.spanFrom(.ceylon.language.Integer.instance(1L)));
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>> tuple$141 = three;
            }
            returning f2.$callvariadic$(.ceylon.language.Integer.instance(1L), (.ceylon.language.Integer)tuple$141.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence)tuple$141.spanFrom(.ceylon.language.Integer.instance(1L)));
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>>> tuple$143 = four;
            }
            returning f.$callvariadic$(.ceylon.language.Integer.instance(1L), (.ceylon.language.Integer)tuple$143.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)tuple$143.spanFrom(.ceylon.language.Integer.instance(1L)));
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>>> tuple$145 = four;
            }
            returning f2.$callvariadic$(.ceylon.language.Integer.instance(1L), (.ceylon.language.Integer)tuple$145.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence)tuple$145.spanFrom(.ceylon.language.Integer.instance(1L)));
        );
        f.$callvariadic$(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential).ceylon.language.empty_.get_());
        f.$callvariadic$(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), one);
        f2.$callvariadic$(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), one);
        f.$callvariadic$(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), two);
        f2.$callvariadic$(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), two);
        f.$callvariadic$(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>sequentialInstance(.ceylon.language.Integer.$TypeDescriptor$, (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential).ceylon.language.empty_.get_(), .ceylon.language.Integer.instance(3L)));
        f2.$callvariadic$(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>sequentialInstance(.ceylon.language.Integer.$TypeDescriptor$, (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential).ceylon.language.empty_.get_(), .ceylon.language.Integer.instance(3L)));
        f.$callvariadic$(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>sequentialInstance(.ceylon.language.Integer.$TypeDescriptor$, one, .ceylon.language.Integer.instance(3L)));
        f2.$callvariadic$(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>sequentialInstance(.ceylon.language.Integer.$TypeDescriptor$, one, .ceylon.language.Integer.instance(3L)));
        f.$callvariadic$(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>sequentialInstance(.ceylon.language.Integer.$TypeDescriptor$, two, .ceylon.language.Integer.instance(3L)));
        f2.$callvariadic$(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>sequentialInstance(.ceylon.language.Integer.$TypeDescriptor$, two, .ceylon.language.Integer.instance(3L)));
    }
    
    private final <Arg, Args extends .ceylon.language.Sequential<? extends Arg>>void spreadParameterised$priv$(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Arg, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Args, final Arg arg, final Args args, final .ceylon.language.Callable<? extends .ceylon.language.Integer> f, final .ceylon.language.Callable<? extends .ceylon.language.Integer> f2) {
        final long i1 = .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>apply(f, args).longValue();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments.class, $reified$T);
    }
}